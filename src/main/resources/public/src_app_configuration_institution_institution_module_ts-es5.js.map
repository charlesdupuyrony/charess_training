{"version":3,"sources":["webpack:///src/app/configuration/institution/form/institution.form.component.html","webpack:///src/app/configuration/institution/form/institution.form.component.ts","webpack:///src/app/configuration/institution/institution-routing.module.ts","webpack:///src/app/configuration/institution/institution.module.ts","webpack:///src/app/configuration/institution/page/institution.page.component.html","webpack:///src/app/configuration/institution/page/institution.page.component.ts","webpack:///src/app/core/models/security/institution.ts"],"names":["InstitutionFormComponent","fb","router","service","snack","parent","FormControl","locationAddress","placeArray","locationArray","isIdentifierDuplicated","isEmailDuplicated","st","getCurrentNavigation","extras","state","title","pl","place","Institution","managers","array","group","Person","map","m","setValue","fg","places","valueChanges","pipe","startWith","value","trim","length","getPlaces","toLowerCase","fullname","subscribe","res","locations","getLocations","ob","name","color","text","open","duration","verticalPosition","horizontalPosition","panelClass","toast","back","err","console","error","toString","getRawValue","save","success","navigate","get","index","email","i","msg","getPersonByEmail","controls","unshift","pull","removeAt","submit","routes","path","component","InstitutionPageComponent","InstitutionRoutingModule","RouterModule","InstitutionModule","InstitutionService","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatDialogModule","MatSortModule","MatToolbarModule","MatSelectModule","MatDatepickerModule","MatCheckboxModule","MatTabsModule","MaterialFileInputModule","MatMenuModule","MatProgressSpinnerModule","TranslateModule","NgxDatatableModule","NgxMaskModule","MatAutocompleteModule","$event","stopPropagation","selection","http","dialog","factory","displayedColumns","SelectionModel","profiles","dim","width","height","contextMenuPosition","x","y","database","datasource","Source","paginator","sort","subs","sink","fromEvent","filter","nativeElement","load","navigateByUrl","skipLocationChange","then","row","dialogRef","DeleteComponent","afterClosed","result","deleteInstitution","id","display","UnsubscribeOnDestroyAdapter","MatPaginator","MatSort","MatMenuTrigger","add","ms","filterChange","BehaviorSubject","filteredData","renderedData","pageIndex","next","displayDataChanges","dataChange","sortChange","page","getInstitutions","merge","data","slice","institution","search","indexOf","sortedData","sortData","startIndex","pageSize","splice","active","direction","a","b","propertyA","propertyB","valueA","isNaN","valueB","DataSource","accronym","textAddress"],"mappings":"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","file":"src_app_configuration_institution_institution_module_ts-es5.js","sourcesContent":["<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"block-header\">\n            <div class=\"row\">\n                <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <h4 class=\"page-title\">{{title | translate}}</h4>\n                    <br/>\n                </div>\n            </div>\n        </div>\n        <div class=\"row clearfix\">\n            <div>\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <form [formGroup]=\"fg\" (submit)=\"submit(fg.value)\">\n                            <div class=\"row\">\n                                <div class=\"col-5\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Name' | translate}}</mat-label>\n                                        <input matInput formControlName=\"name\" required>\n                                        <mat-error *ngIf=\"fg.get('name').hasError('')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-2\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Accronym' | translate}}</mat-label>\n                                        <input matInput formControlName=\"accronym\">\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-5\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Parent' | translate}}</mat-label>\n                                        <input type=\"text\" matInput [formControl]=\"parent\" [matAutocomplete]=\"autoParent\">\n                                        <mat-autocomplete autoActiveFirstOption #autoParent=\"matAutocomplete\" [displayWith]=\"display\">\n                                            <mat-option *ngFor=\"let p of places | async\" [value]=\"p\">{{p.fullname}}</mat-option>\n                                        </mat-autocomplete>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Text Address' | translate}}</mat-label>\n                                        <input matInput formControlName=\"textAddress\">\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-6\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Location Address' | translate}}</mat-label>\n                                        <input type=\"text\" matInput [formControl]=\"locationAddress\" [matAutocomplete]=\"autoLoation\">\n                                        <mat-autocomplete autoActiveFirstOption #autoLoation=\"matAutocomplete\" [displayWith]=\"display\">\n                                            <mat-option *ngFor=\"let l of locations | async\" [value]=\"l\">{{l.fullname}}</mat-option>\n                                        </mat-autocomplete>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <fieldset>\n                                <div class=\"row\">\n                                    <legend>{{\"Manager\" | translate}}</legend>\n                                    <ng-container formArrayName=\"managers\" *ngFor=\"let manager of managers.controls; index as i\">\n                                        <ng-container [formGroupName]=\"i\">\n                                            <!--<div class=\"col-2\">-->\n                                            <!--<mat-form-field class=\"example-full-width mb-3\">-->\n                                            <!--<mat-label>-->\n                                            <!--{{\"Identifier\" | translate}}-->\n                                            <!--<span *ngIf=\"isIdentifierDuplicated[i]\" class=\"error\">{{msg | translate}}</span>-->\n                                            <!--</mat-label>-->\n                                            <!--<input matInput mask=\"000-000-000-0\" formControlName=\"identifier\" required (blur)=\"check(i, 'identifier')\"/>-->\n                                            <!--</mat-form-field>-->\n                                            <!--</div>-->\n                                            <div class=\"col-4\">\n                                                <mat-form-field class=\"example-full-width mb-4\">\n                                                    <mat-label>{{\"Email\"| translate}}<span *ngIf=\"isEmailDuplicated[i]\" class=\"error\">{{msg | translate}}</span></mat-label>\n                                                    <input matInput formControlName=\"email\" [showMaskTyped]=\"true\" (blur)=\"check(i)\"/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-4\">\n                                                <mat-form-field class=\"example-full-width mb-4\">\n                                                    <mat-label>{{\"FirstName\" | translate}}</mat-label>\n                                                    <input matInput formControlName=\"firstName\" [showMaskTyped]=\"true\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-3\">\n                                                <mat-form-field class=\"example-full-width mb-3\">\n                                                    <mat-label>{{\"LastName\" | translate}}</mat-label>\n                                                    <input matInput formControlName=\"lastName\" [showMaskTyped]=\"true\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-1\" *ngIf=\"managers['controls'][i].status == 'VALID' && i===0 && !msg\">\n                                                <div class=\"example-button-row\" >\n                                                    <button mat-mini-fab color=\"primary\" type=\"button\" (click)=\"push()\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n\n                                                </div>\n                                            </div>\n                                            <div class=\"col-1\" *ngIf=\"managers['controls'].length > 1 && (i>0 || managers['controls'][i].status != 'VALID')\">\n                                                <div class=\"example-button-row\" >\n                                                    <button mat-mini-fab color=\"warn\" (click)=\"pull(i)\">\n                                                        <mat-icon class=\"col-white\">delete </mat-icon>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </ng-container>\n                                    </ng-container>\n                                </div>\n                            </fieldset>\n                            <div class=\"row\">\n                                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                    <div class=\"example-button-row\">\n                                        <div class=\"example-button-row\">\n                                            <button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!fg.valid || msg\">{{\"Save\" | translate}} {{msg}}</button>\n                                            <button mat-raised-button color=\"warn\" (click)=\"back()\" tabindex=\"-1\">{{\"Cancel\" | translate}}</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import {Component, OnInit} from \"@angular/core\";\nimport {\n    FormArray,\n    FormBuilder,\n    FormControl,\n    FormGroup\n} from \"@angular/forms\";\nimport {Observable, map} from \"rxjs\";\nimport {InstitutionService} from \"../institution.service\";\nimport {startWith} from \"rxjs/operators\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {Person} from \"../../../core/models/security/person\";\nimport {Institution} from \"../../../core/models/security/institution\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './institution.form.component.html'\n})\n\nexport class InstitutionFormComponent implements OnInit {\n\n    fg: FormGroup;\n    title: string;\n    place: Institution;\n    parent = new FormControl();\n    locationAddress = new FormControl();\n    places: Observable<Institution[]>;\n    locations: Observable<Location[]>;\n    placeArray = [];\n    locationArray = [];\n    isIdentifierDuplicated = [];\n    isEmailDuplicated = [];\n    msg: string;\n\n    constructor(private fb: FormBuilder, private router: Router, private service: InstitutionService, private snack: MatSnackBar){\n        const st = this.router.getCurrentNavigation().extras.state;\n        this.title = st?'Edit the current institution':'Create new institution';\n        let pl = (st && st.place)?st.place: new Institution({});\n        pl.managers = this.fb.array(pl.managers==null?[this.fb.group(new Person({}))]: pl.managers.map(m=>this.fb.group(m)));\n        if(pl && pl.parent)\n            this.parent.setValue(pl.parent);\n        if(pl && pl.locationAddress)\n            this.locationAddress.setValue(pl.locationAddress);\n        this.fg = this.fb.group(pl);\n    }\n\n    ngOnInit(){\n        this.places = this.parent.valueChanges.pipe(startWith(''),\n            map(value => {\n                if(typeof value==='string' && value.trim().length < 1)\n                    return [];\n                this.service.getPlaces(typeof value==='string'?value.toLowerCase():value.fullname).subscribe((res)=>{\n                    this.placeArray = res;\n                });\n                return this.placeArray;\n            })\n        );\n\n        this.locations = this.locationAddress.valueChanges.pipe(startWith(''),\n            map(value => {\n                if(typeof value==='string' && value.trim().length < 1)\n                    return [];\n                this.service.getLocations(typeof value==='string'?value.toLowerCase(): value.fullname).subscribe((res)=>{\n                    this.locationArray = res;\n                });\n                return this.locationArray;\n            })\n        );\n    }\n\n    display(ob): string {\n        if(!ob)\n            return;\n        return ob.fullname?ob.fullname:ob.name;\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    private success(){\n        this.toast('bg-green','The usr has been successfully created');\n        this.back();\n    }\n\n    private error(err: HttpErrorResponse){\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    submit(ob: any): void {\n        ob.parent = this.parent.value?.toString().trim().length <1?ob.parent:this.parent.value;\n        ob.locationAddress = this.locationAddress.value;\n        ob.managers = this.managers.getRawValue();\n        this.service.save(ob).subscribe(\n            (res) => this.success(),\n            (err) => this.error(err)\n        );\n    }\n\n    back(){\n        this.router.navigate(['configuration/institution/page']);\n    }\n\n    get managers(): FormArray {\n        return this.fg.get('managers') as FormArray;\n    }\n\n    check(index){\n        const managers = this.managers.getRawValue();\n        const email = managers[index].email;\n        if(email?.trim().length < 1)\n            return;\n        if(managers.length > 1){\n            for(let i=0; i< managers.length; i++){\n                if(index != i){\n                    if(email === managers[i].email){\n                        this.isEmailDuplicated[index] = true;\n                        this.msg = ' (existed in present pool)';\n                        return;\n                    }\n                }\n            }\n        }\n        this.service.getPersonByEmail(email).subscribe(res => {\n            if(res != null){\n                this.managers.controls.unshift(this.fb.group(res));\n                this.pull(index+1);\n            }\n        });\n    }\n\n    push(){\n        this.managers.controls.unshift(this.fb.group(new Person({})));\n    }\n\n    pull(index: number): void {\n        if (this.managers.length > 1)\n            this.managers.removeAt(index);\n    }\n}","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {InstitutionPageComponent} from \"./page/institution.page.component\";\r\nimport {InstitutionFormComponent} from \"./form/institution.form.component\";\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'page',\r\n        component: InstitutionPageComponent,\r\n    },\r\n    {\r\n        path: 'form',\r\n        component: InstitutionFormComponent,\r\n    },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class InstitutionRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport {InstitutionRoutingModule} from \"./institution-routing.module\";\r\nimport {InstitutionService} from \"./institution.service\";\r\nimport {InstitutionPageComponent} from \"./page/institution.page.component\";\r\nimport {TranslateModule} from \"@ngx-translate/core\";\r\nimport {NgxDatatableModule} from \"@swimlane/ngx-datatable\";\r\nimport {InstitutionFormComponent} from \"./form/institution.form.component\";\r\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\r\nimport {NgxMaskModule} from \"ngx-mask\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        InstitutionPageComponent,\r\n        InstitutionFormComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatTableModule,\r\n        MatPaginatorModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        MatSnackBarModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        MatDialogModule,\r\n        MatSortModule,\r\n        MatToolbarModule,\r\n        MatSelectModule,\r\n        MatDatepickerModule,\r\n        MatCheckboxModule,\r\n        MatTabsModule,\r\n        MaterialFileInputModule,\r\n        MatMenuModule,\r\n        MatProgressSpinnerModule,\r\n        TranslateModule,\r\n        InstitutionRoutingModule,\r\n        NgxDatatableModule,\r\n        NgxMaskModule,\r\n        MatAutocompleteModule\r\n    ],\r\n    providers: [InstitutionService]\r\n})\r\n\r\nexport class InstitutionModule {}\r\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"card\">\n                        <div class=\"body\">\n                            <div class=\"table-responsive\">\n                                <div class=\"materialTableHeader\">\n                                    <div class=\"row\">\n                                        <div class=\"col-8\">\n                                            <ul class=\"header-buttons-left ml-0\">\n                                                <li class=\"dropdown\"><h2><strong>{{'training.configuration.list.facility' | translate}}</strong></h2></li>\n                                                <li class=\"dropdown m-l-20\">\n                                                    <label><i class=\"material-icons search-icon\">search</i></label>\n                                                    <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\" aria-label=\"Search box\">\n                                                </li>\n                                            </ul>\n                                            <ul class=\"header-buttons\">\n                                                <li>\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"add()\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                                <mat-table #table [dataSource]=\"datasource\" matSort class=\"mat-cell\">\n                                    <ng-container>\n                                        <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\"\n                                                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"\n                                                          [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"name\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Name'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.fullname}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"address\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Adress'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.address}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"managers\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Manager'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{displayManagers(row.managers)}}</mat-cell>\n                                    </ng-container>\n                                    <!--<ng-container matColumnDef=\"parent\">-->\n                                        <!--<mat-header-cell *matHeaderCellDef mat-sort-header>{{'Parent'| translate}}</mat-header-cell>-->\n                                        <!--<mat-cell *matCellDef=\"let row\">{{row?.parent?.name}}</mat-cell>-->\n                                    <!--</ng-container>-->\n                                    <ng-container matColumnDef=\"actions\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Action'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">\n                                            <span>\n                                                <button mat-icon-button color=\"accent\" class=\"btn-tbl-edit\" (click)=\"edit(row)\">\n                                                    <mat-icon aria-label=\"Edit\" class=\"col-white\">edit</mat-icon>\n                                                </button>\n                                                <button mat-icon-button color=\"accent\" class=\"btn-tbl-delete\" (click)=\"delete(row)\">\n                                                    <mat-icon aria-label=\"Delete\" class=\"col-white\">delete</mat-icon>\n                                                </button>\n                                            </span>\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                                    <mat-row *matRowDef=\"let row; columns: displayedColumns;\" [style.cursor]=\"'pointer'\" matRipple> </mat-row>\n                                </mat-table>\n                                <mat-paginator #paginator [length]=\"datasource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import {Component, ElementRef, OnInit, ViewChild} from \"@angular/core\";\nimport {UnsubscribeOnDestroyAdapter} from \"../../../shared/UnsubscribeOnDestroyAdapter\";\nimport {InstitutionService} from \"../institution.service\";\nimport {DataSource} from \"@angular/cdk/table\";\nimport {MatPaginator} from \"@angular/material/paginator\";\nimport {MatSort} from \"@angular/material/sort\";\nimport {Institution} from \"../../../core/models/security/institution\";\nimport {SelectionModel} from \"@angular/cdk/collections\";\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {Router} from \"@angular/router\";\nimport {MatMenuTrigger} from \"@angular/material/menu\";\nimport {BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {DeleteComponent} from \"../../delete/delete.confirm\";\n\n@Component({\n    selector: 'app-page',\n    templateUrl: './institution.page.component.html',\n    styleUrls: ['./institution.page.component.scss']\n})\n\nexport class InstitutionPageComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\n\n    displayedColumns = [\n        'name',\n        'address',\n        'managers',\n        // 'parent',\n        'actions',\n    ];\n\n    database: InstitutionService | null;\n    datasource: Source | null;\n    selection = new SelectionModel<Institution>(true, []);\n    institution: Institution | null;\n    profiles=[];\n    dim = {\n        width: '1200px',\n        height: '420px'\n    };\n\n    constructor(public http: HttpClient, public dialog: MatDialog, private snack: MatSnackBar, private factory: InstitutionService, private router: Router){\n        super();\n    }\n\n    @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\n    @ViewChild('filter', { static: true }) filter: ElementRef;\n    @ViewChild(MatMenuTrigger)\n    contextMenu: MatMenuTrigger;\n    contextMenuPosition = { x: '0px', y: '0px' };\n\n    public load() {\n        this.database = new InstitutionService(this.http);\n        this.datasource = new Source(this.database, this.paginator, this.sort);\n        this.subs.sink = fromEvent(this.filter.nativeElement, 'keyup').subscribe(\n            () => {\n                if (!this.datasource) {\n                    return;\n                }\n                this.datasource.filter = this.filter.nativeElement.value;\n            }\n        );\n    }\n\n    ngOnInit() {\n        this.load();\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    success(){\n        this.router.navigateByUrl('/RefreshComponent', { skipLocationChange: true }).then(() => {\n            this.router.navigate(['/configuration/institution/page']);\n        });\n        this.toast('bg-green','That record has been successfully deleted');\n    }\n\n    private error(err:HttpErrorResponse){\n        this.toast('bg-red','That record is in use somewhere, you have to delete its dependance first!');\n        console.error(err);\n    }\n\n    add(){\n        this.router.navigate(['configuration/institution/form']);\n    }\n\n    edit(row){\n        this.router.navigate(['configuration/institution/form'],{state:{place: row}});\n    }\n\n    delete(row): void {\n        const dialogRef = this.dialog.open(DeleteComponent, {});\n        this.subs.sink = dialogRef.afterClosed().subscribe((result) => {\n            if (result === 1) {\n                this.factory.deleteInstitution(row.id).subscribe(\n                    (res) => this.success(),\n                    (err: HttpErrorResponse)=>this.error(err)\n                );\n                this.load();\n            }\n        });\n    }\n\n    displayManagers(managers) {\n        let display = '';\n        if (managers.length > 0) {\n            if (managers.length == 1) {\n                display = managers[0].fullname;\n            } else if (managers.length == 2){\n                display = managers[0].fullname + ' & ' + managers[1].fullname;\n            } else {\n                display = managers[0].fullname + ' & ' +  (managers.length-1) + ' autres';\n            }\n        }\n        return display;\n    }\n}\n\n\nexport class Source extends DataSource<Institution> {\n\n    filterChange = new BehaviorSubject('');\n\n    get filter(): string {\n        return this.filterChange.value;\n    }\n\n    set filter(filter: string) {\n        this.filterChange.next(filter);\n    }\n\n    filteredData: Institution[] = [];\n    renderedData: Institution[] = [];\n\n    constructor(public service: InstitutionService, public paginator: MatPaginator, public ms: MatSort){\n        super();\n        this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\n    }\n\n    connect(): Observable<Institution[]>{\n        const displayDataChanges = [\n            this.service.dataChange,\n            this.ms.sortChange,\n            this.filterChange,\n            this.paginator.page,\n        ];\n        this.service.getInstitutions();\n        return merge(...displayDataChanges).pipe(\n            map(() => {\n                this.filteredData = this.service.data\n                    .slice()\n                    .filter((institution: Institution) => {\n                        const search = (\n                            institution.name\n                        ).toLowerCase();\n                        return search.indexOf(this.filter.toLowerCase()) !== -1;\n                    });\n                const sortedData = this.sortData(this.filteredData.slice());\n                const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n                this.renderedData = sortedData.splice(startIndex, this.paginator.pageSize);\n                return this.renderedData;\n            })\n        );\n    }\n\n    disconnect() {}\n\n    sortData(data: Institution[]): Institution[] {\n        if (!this.ms.active || this.ms.direction === '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let propertyA: number | string = '';\n            let propertyB: number | string = '';\n            switch (this.ms.active) {\n                case 'id':\n                    [propertyA, propertyB] = [a.id, b.id];\n                    break;\n                case 'name':\n                    [propertyA, propertyB] = [a.name, b.name];\n                    break;\n\n            }\n            const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n            const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n            return (\n                (valueA < valueB ? -1 : 1) * (this.ms.direction === 'asc' ? 1 : -1)\n            );\n        });\n    }\n\n}\n","export class Institution {\n    id: number;\n    name: string;\n    accronym: string;\n    fullname: string;\n    managers?: [{Person}];\n    locationAddress?: Location;\n    textAddress?: string;\n    address?: string;\n    parent?: Institution;\n\n    constructor(institution){\n        {\n            this.id = institution.id;\n            this.name = institution.name;\n            this.accronym = institution.accronym;\n            this.parent = institution.parent || null;\n            this.textAddress = institution.textAddress || '';\n            this.locationAddress = institution.locationAddress || null;\n            this.managers = institution.managers || null;\n        }\n    }\n}"]}