{"version":3,"sources":["webpack:///src/app/core/models/training/participant.ts","webpack:///src/app/core/models/training/training.participants.ts","webpack:///src/app/organisation/training/broadcast-completion/training.broadcast.completion.component.ts","webpack:///src/app/organisation/training/broadcast-completion/training.broadcast.completion.component.html","webpack:///src/app/organisation/training/broadcast/training.broadcast.component.html","webpack:///src/app/organisation/training/broadcast/training.broadcast.component.ts","webpack:///src/app/organisation/training/details/training.details.component.html","webpack:///src/app/organisation/training/details/training.details.component.ts","webpack:///src/app/organisation/training/page/training.page.component.html","webpack:///src/app/organisation/training/page/training.page.component.ts","webpack:///src/app/organisation/training/training-routing.module.ts","webpack:///src/app/organisation/training/training.module.ts"],"names":["Participant","t","id","person","partner","training","status","logistic","transport","TrainingParticipants","participants","TrainingBroadcastCompletionComponent","router","tn","getCurrentNavigation","extras","state","_msg","topic","title","startDate","endDate","e","navigate","go","TrainingBroadcastComponent","fb","service","topicService","placeService","snack","dialog","FormControl","topicArray","location","locationArray","categories","categoryArray","partners","partnerArray","dim","width","height","loading","st","trn","Training","setValue","fg","group","validator","datesValidator","topics","valueChanges","pipe","startWith","map","value","trim","length","getTopics","toLowerCase","name","subscribe","res","locations","getLocations","getCategories","getPlaces","formGroup","start","controls","end","errors","Date","setErrors","color","text","open","duration","verticalPosition","horizontalPosition","panelClass","toast","completion","err","console","error","ob","fullname","broadcast","success","dialogRef","TopicFormComponent","data","action","submit","add","initialize","goToList","TrainingDetailsComponent","JSON","parse","localStorage","getItem","trainingParticpants","array","format","p","get","a","b","identifier","Validators","firstName","lastName","phone","email","back","getRawValue","updateParticipants","unshift","index","removeAt","push","edit","$event","stopPropagation","selection","TrainingPageComponent","http","factory","displayedColumns","SelectionModel","profiles","contextMenuPosition","x","y","database","TrainingService","datasource","Source","paginator","sort","subs","sink","fromEvent","filter","nativeElement","load","navigateByUrl","skipLocationChange","then","managers","display","rw","setItem","stringify","UnsubscribeOnDestroyAdapter","MatPaginator","MatSort","MatMenuTrigger","ms","filterChange","BehaviorSubject","filteredData","renderedData","pageIndex","next","displayDataChanges","dataChange","sortChange","page","getTrainings","merge","slice","search","indexOf","sortedData","sortData","startIndex","pageSize","splice","active","direction","propertyA","propertyB","valueA","isNaN","valueB","DataSource","routes","path","component","TrainingRoutingModule","RouterModule","TrainingModule","InstitutionService","TopicService","CommonModule","FormsModule","ReactiveFormsModule","MatTableModule","MatPaginatorModule","MatFormFieldModule","MatInputModule","MatSnackBarModule","MatButtonModule","MatIconModule","MatDialogModule","MatSortModule","MatToolbarModule","MatSelectModule","MatDatepickerModule","MatCheckboxModule","MatTabsModule","MaterialFileInputModule","MatMenuModule","MatProgressSpinnerModule","TranslateModule","NgxDatatableModule","NgxMaskModule","MatAutocompleteModule"],"mappings":"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","file":"src_app_organisation_training_training_module_ts-es5.js","sourcesContent":["import {Institution} from \"../security/institution\";\nimport {Training} from \"./training\";\nimport {Person} from \"../security/person\";\n\nexport class Participant {\n    id: number;\n    person: Person;\n    partner: Institution;\n    training: Training;\n    status: string;\n    logistic: string;\n    transport: string;\n\n    constructor(t) {\n        {\n            this.id = t.id;\n            this.person = t.person;\n            this.partner = t.partner;\n            this.training = t.training;\n            this.status = t.status;\n            this.logistic = t.logistic;\n            this.transport = t.transport;\n        }\n    }\n}\n","import {Training} from \"./training\";\n\nexport class TrainingParticipants {\n    id: number;\n    training: Training;\n    participants: [{Participant}];\n\n    constructor(t) {\n        {\n            this.id = t.id;\n            this.training = t.training;\n            this.participants = t.participants;\n        }\n    }\n}\n\n","import {Component, OnInit} from \"@angular/core\";\nimport {\n    FormArray,\n    FormBuilder,\n    FormControl,\n    FormGroup, Validators\n} from \"@angular/forms\";\nimport {Observable, map} from \"rxjs\";\nimport {startWith} from \"rxjs/operators\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {TrainingService} from \"../training.service\";\nimport {Topic} from \"../../../core/models/training/topic\";\nimport {Institution} from \"../../../core/models/security/institution\";\nimport {Training} from \"../../../core/models/training/training\";\nimport {InstitutionService} from \"../../../configuration/institution/institution.service\";\nimport {Person} from \"../../../core/models/security/person\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './training.broadcast.completion.component.html',\n    styleUrls: ['./training.broadcast.completion.component.scss']\n\n})\n\nexport class TrainingBroadcastCompletionComponent implements OnInit {\n\n    private _msg: string;\n\n    constructor(private router: Router){\n        const tn = this.router.getCurrentNavigation().extras.state?.training;\n        this._msg = `You have successfully broadcast the training: \"${tn?.topic?.title}\", scheduled from ${tn?.startDate} to ${tn?.endDate}`;\n    }\n\n    get msg(): string {\n        return this._msg;\n    }\n\n    ngOnInit(){}\n\n    go(e){\n        this.router.navigate(['/organisation/training/broadcast']);\n    }\n}","<section class=\"content\">\n    <div class=\"broadcast\">{{msg}}</div>\n    <br/><br/>\n    <div style=\"text-align:center\">Go to:\n        <span (click)=\"go('list')\">{{'Training List' | translate}}</span> |\n        <span (click)=\"go('new')\">{{'New Broadcast' | translate}}</span> |\n        <span (click)=\"go('planning')\">{{'Planning' | translate}}</span>\n    </div>\n</section>\n\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"block-header\">\n            <div class=\"row\">\n                <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <h4 class=\"page-title\">{{'training.organisation.broadcast' | translate}}</h4>\n                    <br/>\n                </div>\n            </div>\n        </div>\n        <div class=\"row clearfix\">\n            <div>\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <form [formGroup]=\"fg\" (submit)=\"submit(fg.value)\">\n                            <div class=\"row\">\n                                <div class=\"col-11\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Title' | translate}}</mat-label>\n                                        <input type=\"text\" matInput [formControl]=\"topic\" [matAutocomplete]=\"autoTopic\" required>\n                                        <mat-autocomplete autoActiveFirstOption #autoTopic=\"matAutocomplete\" [displayWith]=\"display\">\n                                            <mat-option *ngFor=\"let t of topics | async\" [value]=\"t\">{{t.fullname}}</mat-option>\n                                        </mat-autocomplete>\n                                        <mat-error *ngIf=\"topic.hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-1 add-button-training\" (click)=\"add()\">\n                                    <button mat-mini-fab color=\"primary\" type=\"button\">\n                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-2\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Start Date' | translate}}</mat-label>\n                                        <input matInput formControlName=\"startDate\" [matDatepicker]=\"start\" required>\n                                        <mat-datepicker-toggle matSuffix [for]=\"start\"></mat-datepicker-toggle>\n                                        <mat-datepicker #start></mat-datepicker>\n                                        <mat-error *ngIf=\"fg.get('startDate').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-2\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'End Date' | translate}}</mat-label>\n                                        <input matInput formControlName=\"endDate\" [matDatepicker]=\"end\" required>\n                                        <mat-datepicker-toggle matSuffix [for]=\"end\"></mat-datepicker-toggle>\n                                        <mat-datepicker #end></mat-datepicker>\n                                        <mat-error *ngIf=\"fg.get('endDate').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                        <mat-error *ngIf=\"fg.get('endDate').hasError('datesValidator')\">{{'End Date needs to be greater than first date'| translate}}</mat-error>\n\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-8\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Where to' | translate}}</mat-label>\n                                        <input type=\"text\" matInput [formControl]=\"location\" [matAutocomplete]=\"autoLocation\" required>\n                                        <!--<input type=\"text\" matInput [formControl]=\"location\" [matAutocomplete]=\"autoLocation\" (blur)=\"updatePartners();\" required>-->\n                                        <mat-autocomplete autoActiveFirstOption #autoLocation=\"matAutocomplete\" [displayWith]=\"display\">\n                                            <mat-option *ngFor=\"let l of locations | async\" [value]=\"l\">{{l.name}}</mat-option>\n                                        </mat-autocomplete>\n                                        <mat-error *ngIf=\"location.hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-9\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Participants Category' | translate}}</mat-label>\n                                        <mat-select multiple [formControl]=\"categories\" required=\"true\" [(ngModel)]=\"categoryArray\">\n                                            <mat-option *ngFor=\"let c of categoryArray\" [value]=\"c\">{{c.name}}</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"categories.hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Number of attendees per network' | translate}}</mat-label>\n                                        <input matInput formControlName=\"capacity\" required>\n                                        <mat-error *ngIf=\"fg.get('capacity').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-12\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Partners' | translate}}</mat-label>\n                                        <mat-select multiple [formControl]=\"partners\" required=\"true\" [(ngModel)]=\"partnerArray\">\n                                            <mat-option *ngFor=\"let p of partnerArray\" [value]=\"p\">{{p.name}}</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"partners.hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Mode Transmission' | translate}}</mat-label>\n                                        <mat-select formControlName=\"mode\" required>\n                                            <mat-option [value]=\"'MODE_ON_SITE'\">En présentiel</mat-option>\n                                            <mat-option [value]=\"'MODE_ON_LINE'\">En ligne</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"fg.get('mode').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                                <div class=\"col-3\">\n                                    <mat-form-field class=\"example-full-width\" appearance=\"outline\">\n                                        <mat-label>{{'Test Type' | translate}}</mat-label>\n                                        <mat-select formControlName=\"testType\" required>\n                                            <mat-option [value]=\"'TEST_TYPE_AUTO'\">Auto Évaluation</mat-option>\n                                            <mat-option [value]=\"'TEST_TYPE_PRE_AND_POST'\">Pré et Post Tests</mat-option>\n                                        </mat-select>\n                                        <mat-error *ngIf=\"fg.get('testType').hasError('required')\">{{'This field is required' | translate}}</mat-error>\n                                    </mat-form-field>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                    <div class=\"example-button-row\">\n                                        <div class=\"example-button-row\">\n                                            <button mat-raised-button color=\"primary\"  [class.auth-spinner]=\"loading\" [disabled]=\"loading\" [type]=\"submit\" [disabled]=\"!fg.valid\">{{\"Save\" | translate}}</button>\n                                            <button mat-raised-button color=\"warn\" (click)=\"initialize()\" tabindex=\"-1\">{{\"Reinitialize\" | translate}}</button>\n                                            <button mat-raised-button color=\"delete\" (click)=\"goToList()\" tabindex=\"-2\">{{\"Go to List\" | translate}}</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>","import {Component, OnInit} from \"@angular/core\";\nimport {\n    FormArray,\n    FormBuilder,\n    FormControl,\n    FormGroup, Validators\n} from \"@angular/forms\";\nimport {Observable, map} from \"rxjs\";\nimport {startWith} from \"rxjs/operators\";\nimport {Router} from \"@angular/router\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {TrainingService} from \"../training.service\";\nimport {Topic} from \"../../../core/models/training/topic\";\nimport {Institution} from \"../../../core/models/security/institution\";\nimport {Training} from \"../../../core/models/training/training\";\nimport {InstitutionService} from \"../../../configuration/institution/institution.service\";\nimport {TopicService} from \"../../../configuration/topic/topic.service\";\nimport {TopicFormComponent} from \"../../../configuration/topic/form/topic.form.component\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {Person} from \"../../../core/models/security/person\";\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './training.broadcast.component.html',\n    styleUrls: ['./training.broadcast.component.scss']\n})\n\nexport class TrainingBroadcastComponent implements OnInit {\n\n    fg: FormGroup;\n    topics: Observable<Topic[]>;\n    topic = new FormControl();\n    topicArray = [];\n\n    locations: Observable<Institution[]>;\n    location = new FormControl();\n    locationArray = [];\n\n    categories = new FormControl();\n    categoryArray = [];\n\n    partners = new FormControl();\n    partnerArray = [];\n\n    dim = {\n        width: '1000px',\n        height: '380px'\n    };\n    loading = false;\n\n    constructor(private fb: FormBuilder, private router: Router, private service: TrainingService, private topicService: TopicService,\n                private placeService: InstitutionService, private snack: MatSnackBar, public dialog: MatDialog){\n\n        const st = this.router.getCurrentNavigation().extras.state;\n        let trn = (st && st.training)?st.training: new Training({});\n\n        this.topic.setValue(trn.topic);\n        this.location.setValue(trn.location);\n        this.fg = this.fb.group(trn, {validator: this.datesValidator('startDate', 'endDate')});\n\n\n        // this.partners.setValue(trn.partners);\n        // console.log(trn.partners, \"-----------------------------------\");\n\n        // this.partners = trn.partners;\n        // this.categories.setValue(trn.categories);\n\n        // this.fg = this.fb.group(new Training({}), {validator: this.datesValidator('startDate', 'endDate')});\n\n        // const st = this.router.getCurrentNavigation().extras.state;\n        // this.title = st?'Edit the current institution':'Create new institution';\n        // let pl = (st && st.place)?st.place: new Institution({});\n        // pl.managers = this.fb.array(pl.managers==null?[this.fb.group(new Person({}))]: pl.managers.map(m=>this.fb.group(m)));\n        // if(pl && pl.parent)\n        //     this.parent.setValue(pl.parent);\n        // if(pl && pl.locationAddress)\n        //     this.locationAddress.setValue(pl.locationAddress);\n        // this.fg = this.fb.group(pl);\n\n    }\n\n    ngOnInit(){\n        this.topics = this.topic.valueChanges.pipe(startWith(''),\n            map(value => {\n                if(typeof value==='string' && value.trim().length < 1)\n                    return [];\n                this.service.getTopics(typeof value==='string'?value.toLowerCase():value.name).subscribe((res)=>{\n                    this.topicArray = res;\n                });\n                return this.topicArray;\n            })\n        );\n\n        this.locations = this.location.valueChanges.pipe(startWith(''),\n            map(value => {\n                if(typeof value==='string' && value.trim().length < 1)\n                    return [];\n                this.service.getLocations(typeof value==='string'?value.toLowerCase():value.name).subscribe((res)=>{\n                    this.locationArray = res;\n                });\n                return this.locationArray;\n            })\n        );\n\n        this.service.getCategories('').subscribe((res)=>{\n            this.categoryArray = res;\n        });\n\n        this.placeService.getPlaces('').subscribe((res)=>{\n            this.partnerArray = res;\n        });\n    }\n\n    datesValidator(startDate: string, endDate: string){\n        return (formGroup: FormGroup) => {\n            const start = formGroup.controls[startDate];\n            const end = formGroup.controls[endDate];\n            if (end.errors && !end.errors.datesValidator) {\n                return;\n            }\n            if (new Date(start.value) > new Date(end.value)) {\n                end.setErrors({ datesValidator: true });\n            } else {\n                end.setErrors(null);\n            }\n        }\n    }\n\n    // updatePartners(){\n    //     if(this.partnerArray.length > 0 && typeof this.location.value !='string'){\n    //         this.partnerArray = this.partnerArray.filter(p => p.id != this.location.value?.id);\n    //     }\n    // }\n\n    completion(t){\n        // this.router.navigate(['/organisation/training/broadcast-completion'], {state: {training: t}});\n        this.router.navigate(['/organisation/training/page']);\n    }\n\n    initialize(){}\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    private success(t){\n        this.loading = false;\n        this.toast('bg-green','The user has been successfully created');\n        this.completion(t);\n    }\n\n    private error(err: HttpErrorResponse){\n        this.loading = false;\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    display(ob): string {\n        if(!ob)\n            return;\n        return ob.fullname?ob.fullname:(ob.name?ob.name:ob.title);\n    }\n\n    submit(ob: any): void {\n        this.loading = true;\n        ob.topic = this.topic.value;\n        ob.location = this.location.value;\n        ob.categories = this.categories.value;\n        ob.partners = this.partners.value;\n\n        this.service.broadcast(ob).subscribe(\n            (res) => this.success(res),\n            (err) => this.error(err)\n        );\n    }\n\n    cancel(): void {\n        // this.fm.close();\n    }\n\n    goToList() {\n        this.router.navigate(['organisation/training/page']);\n    }\n\n    add(){\n        const dialogRef = this.dialog.open(TopicFormComponent, {\n            ...this.dim,\n            data: {\n                topic: this.topic,\n                action: 'add',\n            }\n        });\n    }\n}\n","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"block-header\">\n            <div class=\"row\">\n                <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                    <h4 class=\"page-title\">{{'Training Details' | translate}}</h4>\n                    <br/>\n                </div>\n            </div>\n        </div>\n        <div class=\"row clearfix\">\n            <!--<div>-->\n                <div class=\"card\">\n                    <div class=\"body\">\n                        <form [formGroup]=\"fg\" (submit)=\"submit(fg.value)\">\n                            <div class=\"row\">\n                                <div class=\"col-1\" (click)=\"edit();\" style=\"cursor:pointer;\">\n                                    <i [ngClass]=\"['material-icons-two-tone', 'icon', training.status.toLowerCase()]\">subject</i>\n                                </div>\n                                <div class=\"col-11\">\n                                    <div class=\"row title\">{{training?.topic?.fullname}}</div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">\n                                            {{'Expected participants total number' | translate}}: <span class=\"corps\">{{training.partners.length * training.capacity}}</span>\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\n                                            {{'Number of participants per network' | translate}}:  <span class=\"corps\">{{training.participants.length}}</span>\n                                        </div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">\n                                            Date de début: <span class=\"corps\">{{startDate.toLocaleString('fr-FR', {weekday:\"long\", year:\"numeric\", month:\"long\", day:\"numeric\"})}}</span>\n                                            &nbsp;&nbsp;&nbsp;&nbsp;\n                                            Date de fin: <span class=\"corps\">{{endDate.toLocaleString('fr-FR', {weekday:\"long\", year:\"numeric\", month:\"long\", day:\"numeric\"})}}</span>\n                                        </div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">Catégorie de professionels attendue:\n                                            <span class=\"corps\" *ngFor=\"let category of training?.categories; index as i\">\n                                            {{i===0?category.name: (i===training.categories.length-1?' et ' + category.name: ' , ' + category.name)}}\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">{{'Invited partners' | translate}}:\n                                            <span class=\"corps\" *ngFor=\"let partner of training?.partners; index as i\">\n                                                <span class=\"{{i >0?'pushspan':''}}\">{{partner.fullname}}<br/></span>\n                                            </span>\n                                        </div>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"inline\">\n                                            Lieu de formation: <span class=\"corps\">{{training?.location.fullname}}</span> se trouvant (au/à/aux) <span class=\"corps\">{{training?.location.address}}</span>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <br/>\n                            <div class=\"row\">\n                                <div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">\n                                    <div class=\"example-button-row\">\n                                        <div class=\"example-button-row\">\n                                            <button mat-raised-button color=\"primary\" [type]=\"submit\">{{\"Save\" | translate}}</button>\n                                            <!--<button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"unchanged\">{{\"Save\" | translate}}</button>-->\n                                            <button mat-raised-button color=\"warn\" (click)=\"back()\" tabindex=\"-1\">{{\"Cancel\" | translate}}</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <fieldset>\n                                <div class=\"row\">\n                                    <legend>{{\"Participants\" | translate}}</legend>\n                                    <ng-container formArrayName=\"participants\" *ngFor=\"let participant of participants.controls; index as i\">\n                                        <ng-container [formGroupName]=\"i\">\n                                            <div class=\"col-1\">\n                                                <mat-form-field class=\"example-full-width\">\n                                                    <mat-label>{{'Institution' | translate}}</mat-label>\n                                                    <mat-select [compareWith]=\"compare\" formControlName=\"partner\">\n                                                        <mat-option *ngFor=\"let p of partnerArray\" [value]=\"p\">{{p.accronym}}</mat-option>\n                                                    </mat-select>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-1\">\n                                                <mat-form-field class=\"example-full-width mb-2\" formGroupName=\"person\">\n                                                    <mat-label>{{\"NIF\" | translate}}</mat-label>\n                                                    <input matInput mask=\"000-000-000-0\" placeholder=\"000-000-000-0\" formControlName=\"identifier\" required (blur)=\"checkIdentifier(i)\"/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-1\">\n                                                <mat-form-field class=\"example-full-width mb-2\" formGroupName=\"person\">\n                                                    <mat-label>{{\"Phone\"| translate}}</mat-label>\n                                                    <input matInput matInput mask=\"0000-0000\" placeholder=\"0000-0000\" formControlName=\"phone\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-2\">\n                                                <mat-form-field class=\"example-full-width mb-3\" formGroupName=\"person\">\n                                                    <mat-label>{{\"Email\"| translate}}</mat-label>\n                                                    <input matInput formControlName=\"email\" [showMaskTyped]=\"true\" required (blur)=\"checkEmail(i)\"/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-2\">\n                                                <mat-form-field class=\"example-full-width mb-3\" formGroupName=\"person\">\n                                                    <mat-label>{{\"FirstName\" | translate}}</mat-label>\n                                                    <input matInput formControlName=\"firstName\" [showMaskTyped]=\"true\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-2\">\n                                                <mat-form-field class=\"example-full-width mb-2\" formGroupName=\"person\">\n                                                    <mat-label>{{\"LastName\" | translate}}</mat-label>\n                                                    <input matInput formControlName=\"lastName\" [showMaskTyped]=\"true\" required/>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-1\">\n                                                <mat-form-field class=\"example-full-width\">\n                                                    <mat-label>{{'Logistic' | translate}}</mat-label>\n                                                    <mat-select formControlName=\"logistic\" required>\n                                                        <mat-option [value]=\"'hotel'\">Hôtel</mat-option>\n                                                        <mat-option [value]=\"'residence'\">Résidence</mat-option>\n                                                        <mat-option [value]=\"'other'\">Autre</mat-option>\n                                                    </mat-select>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-1\">\n                                                <mat-form-field class=\"example-full-width\">\n                                                    <mat-label>{{'Logistic' | translate}}</mat-label>\n                                                    <mat-select formControlName=\"transport\" required>\n                                                        <mat-option [value]=\"'avion'\">Avion</mat-option>\n                                                        <mat-option [value]=\"'machine'\">Machine</mat-option>\n                                                        <mat-option [value]=\"'bateau'\">Bateau</mat-option>\n                                                        <mat-option [value]=\"'other'\">Autre</mat-option>\n                                                    </mat-select>\n                                                </mat-form-field>\n                                            </div>\n                                            <div class=\"col-1\">\n                                                <div class=\"example-button-row\" *ngIf=\"participants['controls'][i].status == 'VALID' && i===0\">\n                                                    <button mat-mini-fab color=\"primary\" type=\"button\" (click)=\"push()\"><mat-icon class=\"col-white\">add</mat-icon></button>\n                                                </div>\n                                                <div class=\"example-button-row\" *ngIf=\"participants['controls'][i].status != 'VALID' || i!==0\">\n                                                    <button mat-mini-fab color=\"warn\" (click)=\"pull(i)\"><mat-icon class=\"col-white\">delete </mat-icon></button>\n                                                </div>\n                                            </div>\n                                        </ng-container>\n                                    </ng-container>\n                                </div>\n                            </fieldset>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        <!--</div>-->\n    </div>\n</section>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!--<section class=\"content\">-->\n    <!--<div class=\"container-fluid\">-->\n        <!--<div class=\"block-header\">-->\n            <!--<div class=\"row\">-->\n                <!--<div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">-->\n                    <!--<h4 class=\"page-title\">{{'Training Details' | translate}}</h4>-->\n                    <!--<br/>-->\n                <!--</div>-->\n            <!--</div>-->\n        <!--</div>-->\n        <!--<div class=\"row clearfix\">-->\n            <!--<div>-->\n                <!--<div class=\"card\">-->\n                    <!--<div class=\"body\">-->\n                        <!--<form [formGroup]=\"fg\" (submit)=\"submit(fg.value)\">-->\n                            <!--<div class=\"row\">-->\n                                <!--<div class=\"col-1\">-->\n                                    <!--<div class=\"{{training.status.toLowerCase()}}\"></div>-->\n                                <!--</div>-->\n                                <!--<div class=\"col-11\">-->\n                                    <!--<div class=\"row title\">{{training.topic?.fullname}}</div>-->\n                                    <!--<div class=\"row\">-->\n                                        <!--<div class=\"inline\">-->\n                                            <!--{{'Start Date' | translate}}: <span class=\"corps\">{{startDate.toLocaleString('fr-FR', {weekday:\"long\", year:\"numeric\", month:\"long\", day:\"numeric\"})}}</span>-->\n                                            <!--&nbsp;&nbsp;&nbsp;&nbsp;-->\n                                            <!--{{'End Date' | translate}}: <span class=\"corps\">{{endDate.toLocaleString('fr-FR', {weekday:\"long\", year:\"numeric\", month:\"long\", day:\"numeric\"})}}</span>-->\n                                        <!--</div>-->\n                                    <!--</div>-->\n                                    <!--<div class=\"row\">-->\n                                        <!--<div class=\"inline\">-->\n                                            <!--{{'Training location' | translate}}: <span class=\"corps\">{{training?.location.fullname}}</span>-->\n                                            <!--{{'located at' | translate}}:  <span class=\"corps\">{{training?.location.address}}</span>-->\n                                        <!--</div>-->\n                                    <!--</div>-->\n                                    <!--<div class=\"row\">-->\n                                        <!--<div class=\"inline\">{{'Expected categories' | translate}}:-->\n                                            <!--<span class=\"corps\" *ngFor=\"let category of training?.categories; index as i\">-->\n                                            <!--{{i===0?category.name: (i===training.categories.length-1?' et ' + category.name: ', ' + category.name)}}-->\n                                            <!--</span>-->\n                                        <!--</div>-->\n                                    <!--</div>-->\n\n\n                                <!--</div>-->\n                                <!--<div class=\"col-sm actions\">-->\n                                    <!--<span class=\"right btn-act-padding\">-->\n                                        <!--<button mat-raised-button color=\"uncompleted\" type=\"button\" (click)=\"chg('TRAINING_UNCOMPLETED')\">{{\"training_uncompleted_action\" | translate}}</button>-->\n                                    <!--</span>-->\n                                    <!--<span class=\"right btn-act-padding\">-->\n                                        <!--<button mat-raised-button color=\"completed\" type=\"button\" (click)=\"chg('TRAINING_COMPLETED')\">{{\"training_completed_action\" | translate}}</button>-->\n                                    <!--</span>-->\n                                    <!--<span class=\"right btn-act-padding\">-->\n                                        <!--<button mat-raised-button color=\"pending\" type=\"button\" (click)=\"chg('TRAINING_PENDING')\">{{\"training_pending_action\" | translate}}</button>-->\n                                    <!--</span>-->\n                                    <!--<span class=\"right btn-act-padding\"><button mat-raised-button color=\"validated\">{{\"training_validated_action\" | translate}}</button></span>-->\n                                    <!--<span class=\"right btn-act-padding\"><button mat-raised-button color=\"rejected\">{{\"training_rejected_action\" | translate}}</button></span>-->\n                                    <!--<span class=\"right btn-act-padding\"><button mat-raised-button color=\"primary\" [type]=\"submit\">{{\"Save\" | translate}}</button></span>-->\n                                    <!--<span class=\"right btn-act-padding\"><button mat-raised-button color=\"warn\" (click)=\"back()\" tabindex=\"-1\">{{\"Back\" | translate}}</button></span>-->\n                                    <!--<span class=\"right btn-act-padding\"><button mat-raised-button tabindex=\"-1\">{{\"Submit participants\" | translate}}</button></span>-->\n                                <!--</div>-->\n                            <!--</div>-->\n                            <!--<br/>-->\n                            <!--&lt;!&ndash;<fieldset>&ndash;&gt;-->\n                                <!--&lt;!&ndash;<div class=\"row\">&ndash;&gt;-->\n                                    <!--&lt;!&ndash;<legend>{{\"Participants\" | translate}}</legend>&ndash;&gt;-->\n                                    <!--&lt;!&ndash;<ng-container formArrayName=\"participants\" *ngFor=\"let person of participants.controls; index as i\">&ndash;&gt;-->\n                                        <!--&lt;!&ndash;<ng-container [formGroupName]=\"i\">&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<div class=\"col-2\">&ndash;&gt;-->\n                                                <!--&lt;!&ndash;<mat-form-field class=\"example-full-width mb-2\">&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<mat-label>{{\"Numéro d'Identifiant Fiscal\" | translate}}</mat-label>&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<input matInput mask=\"000-000-000-0\" formControlName=\"identifier\" required/>&ndash;&gt;-->\n                                                <!--&lt;!&ndash;</mat-form-field>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<div class=\"col-1\">&ndash;&gt;-->\n                                                <!--&lt;!&ndash;<mat-form-field class=\"example-full-width mb-2\">&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<mat-label>{{\"Phone\"| translate}}</mat-label>&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<input matInput formControlName=\"phone\" [showMaskTyped]=\"true\" required/>&ndash;&gt;-->\n                                                <!--&lt;!&ndash;</mat-form-field>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<div class=\"col-3\">&ndash;&gt;-->\n                                                <!--&lt;!&ndash;<mat-form-field class=\"example-full-width mb-3\">&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<mat-label>{{\"Email\"| translate}}</mat-label>&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<input matInput formControlName=\"email\" [showMaskTyped]=\"true\" required/>&ndash;&gt;-->\n                                                <!--&lt;!&ndash;</mat-form-field>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<div class=\"col-3\">&ndash;&gt;-->\n                                                <!--&lt;!&ndash;<mat-form-field class=\"example-full-width mb-3\">&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<mat-label>{{\"FirstName\" | translate}}</mat-label>&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<input matInput formControlName=\"firstName\" [showMaskTyped]=\"true\" required/>&ndash;&gt;-->\n                                                <!--&lt;!&ndash;</mat-form-field>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<div class=\"col-2\">&ndash;&gt;-->\n                                                <!--&lt;!&ndash;<mat-form-field class=\"example-full-width mb-2\">&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<mat-label>{{\"LastName\" | translate}}</mat-label>&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<input matInput formControlName=\"lastName\" [showMaskTyped]=\"true\" required/>&ndash;&gt;-->\n                                                <!--&lt;!&ndash;</mat-form-field>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-1\" *ngIf=\"participants['controls'][i].status == 'VALID' && i===0\">&ndash;&gt;&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<div class=\"col-1\" *ngIf=\"participants['controls'][i].status == 'VALID' && i===0 && participants['controls'].length < training.capacity\">&ndash;&gt;-->\n                                                <!--&lt;!&ndash;<div class=\"example-button-row\" >&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<button mat-mini-fab color=\"primary\" type=\"button\" (click)=\"push()\"><mat-icon class=\"col-white\">add</mat-icon></button>&ndash;&gt;-->\n                                                <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;&lt;!&ndash;<div class=\"col-1\" *ngIf=\"participants['controls'].length > 1 && (i>0 || participants['controls'][i].status != 'VALID')\">&ndash;&gt;&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<div class=\"col-1\" *ngIf=\"participants['controls'].length > 1 && (i>0 || participants['controls'][i].status != 'VALID') || participants['controls'].length >= training.capacity\">&ndash;&gt;-->\n                                                <!--&lt;!&ndash;<div class=\"example-button-row\" >&ndash;&gt;-->\n                                                    <!--&lt;!&ndash;<button mat-mini-fab color=\"warn\" (click)=\"pull(i)\"><mat-icon class=\"col-white\">delete </mat-icon></button>&ndash;&gt;-->\n                                                <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                                        <!--&lt;!&ndash;</ng-container>&ndash;&gt;-->\n                                    <!--&lt;!&ndash;</ng-container>&ndash;&gt;-->\n                                <!--&lt;!&ndash;</div>&ndash;&gt;-->\n                            <!--&lt;!&ndash;</fieldset>&ndash;&gt;-->\n                            <!--<div class=\"row\">-->\n                                <!--<div class=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 mb-2\">-->\n                                    <!--<div class=\"example-button-row\">-->\n                                        <!--<div class=\"example-button-row\">-->\n                                            <!--&lt;!&ndash;<button mat-raised-button color=\"primary\" [type]=\"submit\">{{\"Save\" | translate}}</button>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<button mat-raised-button color=\"primary\" [type]=\"submit\" [disabled]=\"!fg.valid\">{{\"Save\" | translate}}</button>&ndash;&gt;-->\n                                            <!--&lt;!&ndash;<button mat-raised-button color=\"warn\" (click)=\"back()\" tabindex=\"-1\">{{\"Cancel\" | translate}}</button>&ndash;&gt;-->\n                                        <!--</div>-->\n                                    <!--</div>-->\n                                <!--</div>-->\n                            <!--</div>-->\n                        <!--</form>-->\n                    <!--</div>-->\n                <!--</div>-->\n            <!--</div>-->\n        <!--</div>-->\n    <!--</div>-->\n<!--</section>-->\n","import {Component, OnInit} from \"@angular/core\";\nimport {FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Router} from \"@angular/router\";\nimport {Training} from \"../../../core/models/training/training\";\nimport {TrainingService} from \"../training.service\";\nimport {HttpErrorResponse} from \"@angular/common/http\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {Person} from \"../../../core/models/security/person\";\nimport {PartnerTrainingParticipants} from \"../../../core/models/training/partner.training.participants\";\nimport {Participant} from \"../../../core/models/training/participant\";\nimport {TrainingParticipants} from \"../../../core/models/training/training.participants\";\nimport {Institution} from \"../../../core/models/security/institution\";\nimport {InstitutionService} from \"../../../configuration/institution/institution.service\";\n\n\n@Component({\n    selector: 'app-form',\n    templateUrl: './training.details.component.html',\n    styleUrls: ['./training.details.component.scss']\n\n})\n\nexport class TrainingDetailsComponent implements OnInit {\n    fg: FormGroup;\n    training: Training;\n    startDate: Date;\n    endDate: Date;\n    partners = new FormControl();\n    partnerArray = [];\n\n    // loading = false;\n\n\n    constructor(private router: Router, private fb: FormBuilder, private service: TrainingService, private snack: MatSnackBar, private placeService: InstitutionService){\n        const state = this.router.getCurrentNavigation().extras.state;\n\n        this.training = state?state.training:JSON.parse(localStorage.getItem(\"training\"));\n        this.startDate = new Date(this.training?.startDate);\n        this.endDate = new Date(this.training?.endDate);\n\n        const trainingParticpants = new TrainingParticipants(\n            {\n                'training': this.training,\n                'participants': this.fb.array(this.training.participants.length <1?[this.format(new Participant({}))]:this.training.participants.map(\n                 p => this.format(new Participant(p)))\n                )\n            });\n        this.fg = this.fb.group(trainingParticpants);\n    }\n\n    ngOnInit(){\n        this.placeService.getPlaces('').subscribe((res)=>{\n            this.partnerArray = res;\n        });\n    }\n\n    get participants(): FormArray {\n        return this.fg.get('participants') as FormArray;\n    }\n\n    compare(a, b): boolean {\n        return a && b ?(a.id && b.id && a.id===b.id):a===b;\n    }\n\n    format(p: Participant): FormGroup {\n        return this.fb.group({\n            id: [p?.id],\n            partner: [p?.partner],\n            logistic: [p.logistic],\n            transport: [p.transport],\n            person: this.fb.group({\n                id: [p?.person?.id],\n                identifier: [p?.person?.identifier, [Validators.required]],\n                firstName: [p?.person?.firstName, [Validators.required]],\n                lastName: [p?.person?.lastName, [Validators.required]],\n                phone: [p?.person?.phone, [Validators.required]],\n                email: [p?.person?.email, [Validators.required]],\n            })\n        });\n    }\n\n    edit(){\n        this.router.navigate(['organisation/training/broadcast'], {state: {training: this.training}});\n        // this.router.navigate(['configuration/institution/form'],{state:{place: row}});\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    back(){\n        this.router.navigate(['organisation/training/page']);\n    }\n\n    private chgSuccess(){\n        this.toast('bg-green','Training status successfully changed...');\n        // localStorage.setItem(\"training\", JSON.stringify(this.training));\n        // this.router.navigate(['organisation/training/details'],{state:{training: this.training}});\n    }\n\n    private success(){\n        this.toast('bg-green','The usr has been successfully created');\n        this.back();\n    }\n\n    private error(err: HttpErrorResponse){\n        this.toast('bg-red','Something went wrong the usr has not been created. Please, try again!');\n        console.error(err);\n    }\n\n    private chgError(err: HttpErrorResponse){\n        this.toast('bg-red','Technical issues. Status cannot be changed!');\n        console.error(err);\n    }\n\n    submit(ob: any): void {\n        ob.id = this.training.id;\n        ob.participants = this.participants.getRawValue();\n        this.service.updateParticipants(ob).subscribe(\n            (res) => this.success(),\n            (err) => this.error(err)\n        );\n    }\n\n    push(){\n        this.participants.controls.unshift(this.format(new Participant({})));\n    }\n\n    pull(index: number): void {\n        if (this.participants.length > 0){\n            this.participants.removeAt(index);\n            if(this.participants.length==0)\n                this.push()\n        }\n\n    }\n}","<section class=\"content\">\n    <div class=\"container-fluid\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"card\">\n                        <div class=\"body\">\n                            <div class=\"table-responsive\">\n                                <div class=\"materialTableHeader\">\n                                    <div class=\"row\">\n                                        <div class=\"col-8\">\n                                            <ul class=\"header-buttons-left ml-0\">\n                                                <li class=\"dropdown\"><h2><strong>{{'training.page' | translate}}</strong></h2></li>\n                                                <li class=\"dropdown m-l-20\">\n                                                    <label><i class=\"material-icons search-icon\">search</i></label>\n                                                    <input placeholder=\"Search\" type=\"text\" #filter class=\"browser-default search-field\" aria-label=\"Search box\">\n                                                </li>\n                                            </ul>\n                                            <ul class=\"header-buttons\">\n                                                <li>\n                                                    <button mat-mini-fab color=\"primary\" (click)=\"add()\">\n                                                        <mat-icon class=\"col-white\">add</mat-icon>\n                                                    </button>\n                                                </li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div>&nbsp;</div>\n                                <div>\n                                    <div style=\"font-weight: bold\">{{'Legend' | translate}}:</div>\n                                    <div>\n                                        {{'training_broadcast' | translate}}: <button mat-icon-button class=\"btn-tbl-edit training_broadcast\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        {{'training_requested' | translate}}: <button mat-icon-button class=\"btn-tbl-edit training_requested\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        {{'training_validated' | translate}}: <button mat-icon-button class=\"btn-tbl-edit training_validated\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        {{'training_rejected' | translate}}: <button mat-icon-button class=\"btn-tbl-edit training_rejected\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        {{'training_pending' | translate}}: <button mat-icon-button class=\"btn-tbl-edit training_pending\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        {{'training_completed' | translate}}: <button mat-icon-button class=\"btn-tbl-edit training_completed\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                        {{'training_uncompleted' | translate}}: <button mat-icon-button class=\"btn-tbl-edit training_uncompleted\"><mat-icon></mat-icon></button> &nbsp;&nbsp;&nbsp;\n                                    </div>\n                                </div>\n\n                                <mat-table #table [dataSource]=\"datasource\" matSort class=\"mat-cell\">\n                                    <ng-container matColumnDef=\"status\">\n                                        <mat-header-cell *matHeaderCellDef></mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">\n                                            <span>\n                                                <button mat-icon-button class=\"btn-tbl-edit {{row.status.toLowerCase()}}\">\n                                                    <mat-icon></mat-icon>\n                                                </button>\n                                            </span>\n                                        </mat-cell>\n                                    </ng-container>\n                                    <ng-container>\n                                        <mat-header-cell *matHeaderCellDef [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (change)=\"$event ? masterToggle() : null\" [checked]=\"selection.hasValue() && isAllSelected()\"\n                                                          [indeterminate]=\"selection.hasValue() && !isAllSelected()\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\" [ngClass]=\"'tbl-col-width-per-6'\">\n                                            <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\"\n                                                          [checked]=\"selection.isSelected(row)\" [ngClass]=\"'tbl-checkbox'\">\n                                            </mat-checkbox>\n                                        </mat-cell>\n                                    </ng-container>\n\n                                    <ng-container matColumnDef=\"topic\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Theme'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.topic.fullname}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"startDate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Start Date'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.startDate}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"endDate\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'End Date'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.endDate}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"capacity\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Number of attendees'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.participants.length}}/<span style=\"font-weight: bold\">{{row.capacity * row.partners.length}}</span></mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"network\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Number of networks'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.partners.length}}</mat-cell>\n                                    </ng-container>\n                                    <ng-container matColumnDef=\"location\">\n                                        <mat-header-cell *matHeaderCellDef mat-sort-header>{{'Training Location'| translate}}</mat-header-cell>\n                                        <mat-cell *matCellDef=\"let row\">{{row.location.name}}</mat-cell>\n                                    </ng-container>\n                                    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n                                    <mat-row *matRowDef=\"let row; columns: displayedColumns;\" (click)=\"details(row)\" [style.cursor]=\"'pointer'\" matRipple> </mat-row>\n                                </mat-table>\n                                <mat-paginator #paginator [length]=\"datasource.filteredData.length\" [pageIndex]=\"0\" [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</section>\n","import {Component, ElementRef, OnInit, ViewChild} from \"@angular/core\";\nimport {UnsubscribeOnDestroyAdapter} from \"../../../shared/UnsubscribeOnDestroyAdapter\";\nimport {DataSource} from \"@angular/cdk/table\";\nimport {MatPaginator} from \"@angular/material/paginator\";\nimport {MatSort} from \"@angular/material/sort\";\nimport {SelectionModel} from \"@angular/cdk/collections\";\nimport {HttpClient, HttpErrorResponse} from \"@angular/common/http\";\nimport {MatDialog} from \"@angular/material/dialog\";\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport {Router} from \"@angular/router\";\nimport {MatMenuTrigger} from \"@angular/material/menu\";\nimport {BehaviorSubject, fromEvent, merge, Observable } from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Training} from \"../../../core/models/training/training\";\nimport {TrainingService} from \"../training.service\";\n\n@Component({\n    selector: 'app-page',\n    templateUrl: './training.page.component.html',\n    styleUrls: ['./training.page.component.scss']\n})\n\nexport class TrainingPageComponent extends UnsubscribeOnDestroyAdapter implements OnInit {\n\n    displayedColumns = [\n        'status',\n        'topic',\n        'startDate',\n        'endDate',\n        'capacity',\n        'network',\n        'location'\n    ];\n\n    database: TrainingService | null;\n    datasource: Source | null;\n    selection = new SelectionModel<Training>(true, []);\n    Training: Training | null;\n    profiles=[];\n    dim = {\n        width: '1200px',\n        height: '420px'\n    };\n\n    constructor(public http: HttpClient, public dialog: MatDialog, private snack: MatSnackBar, private factory: TrainingService, private router: Router){\n        super();\n    }\n\n    @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n    @ViewChild(MatSort, { static: true }) sort: MatSort;\n    @ViewChild('filter', { static: true }) filter: ElementRef;\n    @ViewChild(MatMenuTrigger)\n    contextMenu: MatMenuTrigger;\n    contextMenuPosition = { x: '0px', y: '0px' };\n\n    public load() {\n        this.database = new TrainingService(this.http);\n        this.datasource = new Source(this.database, this.paginator, this.sort);\n        this.subs.sink = fromEvent(this.filter.nativeElement, 'keyup').subscribe(\n            () => {\n                if (!this.datasource) {\n                    return;\n                }\n                this.datasource.filter = this.filter.nativeElement.value;\n            }\n        );\n    }\n\n    ngOnInit() {\n        this.load();\n    }\n\n    private toast(color, text) {\n        this.snack.open(text, '', {\n            duration: 2000, verticalPosition: 'top', horizontalPosition: 'right', panelClass: color,\n        });\n    }\n\n    success(){\n        this.router.navigateByUrl('/RefreshComponent', { skipLocationChange: true }).then(() => {\n            this.router.navigate(['/organisation/training/page']);\n        });\n        this.toast('bg-green','That record has been successfully deleted');\n    }\n\n    private error(err:HttpErrorResponse){\n        this.toast('bg-red','That record is in use somewhere, you have to delete its dependance first!');\n        console.error(err);\n    }\n\n    displayManagers(managers) {\n        let display = '';\n        if (managers.length > 0) {\n            if (managers.length == 1) {\n                display = managers[0].fullname;\n            } else if (managers.length == 2){\n                display = managers[0].fullname + ' & ' + managers[1].fullname;\n            } else {\n                display = managers[0].fullname + ' & ' +  (managers.length-1) + ' autres';\n            }\n        }\n        return display;\n    }\n\n    add(){\n        this.router.navigate(['organisation/training/broadcast']);\n    }\n\n    details(rw){\n        localStorage.setItem(\"training\", JSON.stringify(rw));\n        this.router.navigate(['organisation/training/details'],{state:{training: rw}});\n    }\n}\n\n\nexport class Source extends DataSource<Training> {\n\n    filterChange = new BehaviorSubject('');\n\n    get filter(): string {\n        return this.filterChange.value;\n    }\n\n    set filter(filter: string) {\n        this.filterChange.next(filter);\n    }\n\n    filteredData: Training[] = [];\n    renderedData: Training[] = [];\n\n    constructor(public service: TrainingService, public paginator: MatPaginator, public ms: MatSort){\n        super();\n        this.filterChange.subscribe(() => (this.paginator.pageIndex = 0));\n    }\n\n    connect(): Observable<Training[]>{\n        const displayDataChanges = [\n            this.service.dataChange,\n            this.ms.sortChange,\n            this.filterChange,\n            this.paginator.page,\n        ];\n        this.service.getTrainings();\n        return merge(...displayDataChanges).pipe(\n            map(() => {\n                this.filteredData = this.service.data\n                    .slice()\n                    .filter((training: Training) => {\n                        const search = (\n                            training.topic.title\n                        ).toLowerCase();\n                        return search.indexOf(this.filter.toLowerCase()) !== -1;\n                    });\n                const sortedData = this.sortData(this.filteredData.slice());\n                const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n                this.renderedData = sortedData.splice(startIndex, this.paginator.pageSize);\n                return this.renderedData;\n            })\n        );\n    }\n\n    disconnect() {}\n\n    sortData(data: Training[]): Training[] {\n        if (!this.ms.active || this.ms.direction === '') {\n            return data;\n        }\n        return data.sort((a, b) => {\n            let propertyA: number | string = '';\n            let propertyB: number | string = '';\n            switch (this.ms.active) {\n                case 'id':\n                    [propertyA, propertyB] = [a.id, b.id];\n                    break;\n                case 'name':\n                    [propertyA, propertyB] = [a.topic.title, b.topic.title];\n                    break;\n\n            }\n            const valueA = isNaN(+propertyA) ? propertyA : +propertyA;\n            const valueB = isNaN(+propertyB) ? propertyB : +propertyB;\n            return (\n                (valueA < valueB ? -1 : 1) * (this.ms.direction === 'asc' ? 1 : -1)\n            );\n        });\n    }\n\n}\n","import {NgModule } from '@angular/core';\nimport {Routes, RouterModule } from '@angular/router';\nimport {TrainingBroadcastComponent} from \"./broadcast/training.broadcast.component\";\nimport {TrainingBroadcastCompletionComponent} from \"./broadcast-completion/training.broadcast.completion.component\";\nimport {TrainingPageComponent} from \"./page/training.page.component\";\nimport {TrainingDetailsComponent} from \"./details/training.details.component\";\n\n\nconst routes: Routes = [\n    {\n        path: 'details',\n        component: TrainingDetailsComponent,\n    },\n    {\n        path: 'broadcast',\n        component: TrainingBroadcastComponent,\n    },\n    {\n        path: 'page',\n        component: TrainingPageComponent,\n    },\n    {\n        path: 'broadcast-completion',\n        component: TrainingBroadcastCompletionComponent,\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class TrainingRoutingModule {}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatMenuModule } from '@angular/material/menu';\nimport {TranslateModule} from \"@ngx-translate/core\";\nimport {NgxDatatableModule} from \"@swimlane/ngx-datatable\";\nimport {MatAutocompleteModule} from \"@angular/material/autocomplete\";\nimport {NgxMaskModule} from \"ngx-mask\";\nimport {TrainingBroadcastComponent} from \"./broadcast/training.broadcast.component\";\nimport {TrainingRoutingModule} from \"./training-routing.module\";\nimport {TrainingService} from \"./training.service\";\nimport {InstitutionService} from \"../../configuration/institution/institution.service\";\nimport {TrainingBroadcastCompletionComponent} from \"./broadcast-completion/training.broadcast.completion.component\";\nimport {TrainingPageComponent} from \"./page/training.page.component\";\nimport {TopicService} from \"../../configuration/topic/topic.service\";\nimport {TrainingDetailsComponent} from \"./details/training.details.component\";\n\n@NgModule({\n    declarations: [\n        TrainingBroadcastComponent,\n        TrainingBroadcastCompletionComponent,\n        TrainingPageComponent,\n        TrainingDetailsComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatSnackBarModule,\n        MatButtonModule,\n        MatIconModule,\n        MatDialogModule,\n        MatSortModule,\n        MatToolbarModule,\n        MatSelectModule,\n        MatDatepickerModule,\n        MatCheckboxModule,\n        MatTabsModule,\n        MaterialFileInputModule,\n        MatMenuModule,\n        MatProgressSpinnerModule,\n        TranslateModule,\n        TrainingRoutingModule,\n        NgxDatatableModule,\n        NgxMaskModule,\n        MatAutocompleteModule\n    ],\n    providers: [TrainingService, InstitutionService, TopicService]\n})\n\nexport class TrainingModule {}"]}